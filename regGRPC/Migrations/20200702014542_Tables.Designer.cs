// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using regGRPC;

namespace regGRPC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200702014542_Tables")]
    partial class Tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Scaffolds.EnvironmentType", b =>
                {
                    b.Property<byte>("ID")
                        .HasColumnName("EnvironmentTypeID")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("VARCHAR(20)")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("EnvironmentType");
                });

            modelBuilder.Entity("Scaffolds.LevelType", b =>
                {
                    b.Property<byte>("ID")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LevelType");
                });

            modelBuilder.Entity("Scaffolds.RegistrationProcess", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("EnvironmentTypeID")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReportID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("EnvironmentTypeID");

                    b.HasIndex("ReportID")
                        .IsUnique();

                    b.ToTable("RegistrationProcess");
                });

            modelBuilder.Entity("Scaffolds.Report", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Events")
                        .HasColumnType("int");

                    b.Property<byte>("LevelTypeID")
                        .HasColumnType("tinyint");

                    b.Property<string>("ReportDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LevelTypeID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Scaffolds.RegistrationProcess", b =>
                {
                    b.HasOne("Scaffolds.EnvironmentType", "EnvironmentType")
                        .WithMany("RegistrationProcess")
                        .HasForeignKey("EnvironmentTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scaffolds.Report", "Report")
                        .WithOne("RegistrationProcess")
                        .HasForeignKey("Scaffolds.RegistrationProcess", "ReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Scaffolds.Report", b =>
                {
                    b.HasOne("Scaffolds.LevelType", "LevelType")
                        .WithMany("Reports")
                        .HasForeignKey("LevelTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
